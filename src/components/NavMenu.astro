---
// Generic dropdown navigation menu built from files in a folder.
// Usage: <NavMenu label="Activities" folder="activities" />
interface Item { url: string; label: string }
const { label, folder } = Astro.props as { label: string; folder: string };
// Preload modules for each supported folder. Add new entries as folders grow.
const modulesMap = {
  activities: import.meta.glob('../pages/activities/**/*.{astro,md,mdx}', { eager: true }),
  'about-us': import.meta.glob('../pages/about-us/**/*.{astro,md,mdx}', { eager: true }),
  registration: import.meta.glob('../pages/registration/**/*.{astro,md,mdx}', { eager: true }),
} as Record<string, any>;
const modules = modulesMap[folder] ?? {};
const startCase = (s: string) =>
  s
    .replace(/[-_]/g, ' ')
    .split(' ')
    .map((w) => (w ? w[0].toUpperCase() + w.slice(1) : w))
    .join(' ');
function toRoute(file: string) {
  let p = file;
  const idx = p.lastIndexOf('/pages');
  if (idx !== -1) p = p.slice(idx + 6);
  const dot = p.lastIndexOf('.');
  if (dot !== -1) p = p.slice(0, dot);
  if (p.endsWith('/index')) p = p.slice(0, -('/index'.length)) + '/';
  return p;
}
const toLabelFromRoute = (route: string) => {
  const parts = route.split('/').filter(Boolean);
  const last = parts[parts.length - 1] ?? folder;
  return startCase(last);
};
const items: Item[] = Object.entries(modules)
  .map(([file, mod]: any) => {
    const url = toRoute(file);
    const label = mod?.frontmatter?.title || mod?.title || toLabelFromRoute(url);
    return { url, label } as Item;
  })
  // hide the folder index page in the dropdown
  .filter((it) => it.url !== `/${folder}/`)
  .sort((a, b) => a.label.localeCompare(b.label));
---
<nav class="relative" aria-label={label}>
  <details class="group inline-block relative">
    <summary class="flex items-center gap-1 list-none cursor-pointer select-none px-3 py-2 border border-ink rounded-md font-semibold bg-white hover:bg-soft focus-visible:outline focus-visible:outline-2 focus-visible:outline-brand">
      {label}
      <svg
        class="w-3 h-3 transition-transform group-open:rotate-180"
        viewBox="0 0 10 6"
        fill="none"
        xmlns="http://www.w3.org/2000/svg"
        aria-hidden="true">
        <path d="M1 1L5 5L9 1" stroke="currentColor" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round" />
      </svg>
    </summary>
    <ul class="absolute right-0 mt-2 p-2 border border-soft bg-white rounded-xl min-w-[14rem] shadow-lg z-20">
      {items.map((it) => (
        <li class="list-none">
          <a
            class="block px-3 py-2 no-underline text-inherit rounded-md hover:bg-soft focus:bg-soft outline-none"
            href={it.url}
            >{it.label}</a
          >
        </li>
      ))}
    </ul>
  </details>
</nav>
