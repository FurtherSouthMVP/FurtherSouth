---
interface Item {
  url: string;
  label: string;
}
const { label, folder } = Astro.props as { label: string; folder: string };

const modulesMap = {
  activities: import.meta.glob("../pages/activities/**/*.{astro,md,mdx}", {
    eager: true,
  }),
  "about-us": import.meta.glob("../pages/about-us/**/*.{astro,md,mdx}", {
    eager: true,
  }),
  registration: import.meta.glob("../pages/registration/**/*.{astro,md,mdx}", {
    eager: true,
  }),
} as Record<string, any>;

const modules = modulesMap[folder] ?? {};

const startCase = (s: string) =>
  s
    .replace(/[-_]/g, " ")
    .split(" ")
    .map((w) => (w ? w[0].toUpperCase() + w.slice(1) : w))
    .join(" ");

function toRoute(file: string) {
  let p = file;
  const idx = p.lastIndexOf("/pages");
  if (idx !== -1) p = p.slice(idx + 6);
  const dot = p.lastIndexOf(".");
  if (dot !== -1) p = p.slice(0, dot);
  if (p.endsWith("/index")) p = p.slice(0, -"/index".length) + "/";
  return p;
}

const toLabelFromRoute = (route: string) => {
  const parts = route.split("/").filter(Boolean);
  const last = parts[parts.length - 1] ?? folder;
  return startCase(last);
};

const items: Item[] = Object.entries(modules)
  .map(([file, mod]: any) => {
    const url = toRoute(file);
    const label =
      mod?.frontmatter?.title || mod?.title || toLabelFromRoute(url);
    return { url, label } as Item;
  })
  .filter((it) => it.url !== `/${folder}/`)
  .sort((a, b) => a.label.localeCompare(b.label));
---

<nav class="relative" aria-label={label}>
  <div class="group relative inline-block">
    <button
      type="button"
      class="flex cursor-pointer select-none items-center gap-1 rounded-md border border-ink bg-white px-3 py-2 font-semibold hover:bg-soft focus-visible:outline focus-visible:outline-2 focus-visible:outline-brand"
      aria-haspopup="menu"
    >
      {label}
      <svg
        class="h-3 w-3 transition-transform group-hover:rotate-180"
        viewBox="0 0 10 6"
        fill="none"
        xmlns="http://www.w3.org/2000/svg"
        aria-hidden="true"
      >
        <path
          d="M1 1L5 5L9 1"
          stroke="currentColor"
          stroke-width="1.5"
          stroke-linecap="round"
          stroke-linejoin="round"></path>
      </svg>
    </button>

    <!-- Hidden by default; shown only while hovered -->
    <ul
      class="absolute right-0 top-full z-20 hidden min-w-[14rem] rounded-xl border border-soft bg-white p-2 shadow-lg group-focus-within:block group-hover:block"
      role="menu"
    >
      {
        items.map((it) => (
          <li class="list-none" role="none">
            <a
              class="block rounded-md px-3 py-2 text-inherit no-underline outline-none hover:bg-soft focus:bg-soft"
              href={it.url}
              role="menuitem"
            >
              {it.label}
            </a>
          </li>
        ))
      }
    </ul>
  </div>
</nav>
